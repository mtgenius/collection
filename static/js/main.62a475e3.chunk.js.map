{"version":3,"sources":["components/pagination/pagination.view.tsx","components/pagination/pagination.hook.ts","utils/true-function.ts","components/card-collection/card-collection.hook.add-to-collection.ts","components/scryfall-image/scryfall-image.util.map-image-to-height.ts","components/scryfall-image/scryfall-image.util.map-image-to-width.ts","components/scryfall-image/scryfall-image.view.tsx","components/scryfall-image/scryfall-image.hook.ts","components/card-collection/card-collection.hook.card-definition.tsx","components/card-collection/card-collection.hook.subtract-from-collection.ts","components/card-collection/card-collection.hook.ts","utils/map-map-to-record.ts","components/card-collection/card-collection.view.empty.tsx","components/card-collection/card-collection.view.header.tsx","components/card-collection/card-collection.view.tsx","hooks/use-async-state.ts","utils/noop.ts","components/load-cards/load-cards.util.sort-cards.ts","components/load-cards/load-cards.util.map-error-to-list-item.tsx","components/load-cards/load-cards.view.tsx","components/load-cards/load-cards.hook.ts","components/load-metadata/load-metadata.view.error.tsx","components/load-metadata/load-metadata.view.loading.tsx","components/load-metadata/load-metadata.view.tsx","components/load-metadata/load-metadata.hook.ts","components/wrapper/wrapper.view.tsx","constants/locale.ts","constants/translations.ts","components/app/app.view.tsx","components/app/app.hook.ts","utils/is-record.ts","utils/is-default.ts","utils/map-to-default.ts","utils/is-string.ts","utils/validate-array-of-strings.ts","utils/is-array-of-strings.ts","utils/validate-default.ts","utils/fetch-card-names.ts","utils/validate-meta-data.ts","utils/is-meta-data.ts","utils/fetch-metadata.ts","utils/is-record-of.ts","utils/validate-record-of-strings.ts","utils/is-record-of-strings.ts","utils/fetch-scryfall-ids.ts","utils/fetch-set-codes.ts","utils/is-number.ts","utils/is-record-of-numbers.ts","utils/validate-record-of-record-of-numbers.ts","utils/is-record-of-record-of-numbers.ts","utils/fetch-set-index-card-index-multiverse-ids.ts","utils/fetch-set-names.ts","index.tsx","components/card-collection/card-collection.hook.card-definition.module.scss"],"names":["Pagination","currentPageIndex","onChange","pagesCount","ariaLabels","translate","useTranslate","useMemo","nextPageLabel","previousPageLabel","pageLabel","pageNumber","n","usePagination","trueFunction","useAddToCollection","setCollection","useCallback","multiverseId","oldCollection","newCollection","Map","oldCount","get","set","mapImageToHeight","image","mapImageToWidth","ScryfallImage","alt","scryfallId","children","className","title","srcDir1","substr","srcDir2","height","src","width","useScryfallImage","useCardCollectionCardDefinition","collection","onAddToCollection","onSubtractFromCollection","header","cardName","setCode","count","direction","size","styles","button","onClick","disableBrowserAutocorrect","readOnly","value","toString","disabled","useSubtractFromCollection","delete","DEFAULT_COLLECTION","useCardCollection","cards","pageSize","handlePaginationChange","handleChange","paginate","useState","useTextFilter","filteringText","handleTextFilterChange","setFilteringText","lowerCaseFilteringText","toLowerCase","filteredItems","filter","includes","filteringPlaceholder","isExportDisabled","Math","ceil","length","cardDefinition","useCardDefinition","handleClearFilter","handleExport","newExport","map","record","entries","key","mapMapToRecord","download","JSON","stringify","items","selectedItems","has","CardCollectionEmpty","onClearFilter","variant","TEXT_LABEL_MARGIN","bottom","CardCollectionHeader","lastUpdated","onExport","actions","description","color","display","margin","CardCollection","empty","isItemDisabled","selectionType","stickyHeader","trackBy","pagination","defaultInitializer","loading","reducer","_prevState","action","type","error","data","useAsyncState","act","useReducer","state","dispatch","a","handleError","err","handleSuccess","then","catch","NOOP","sortCards","one","two","mapErrorToListItem","message","LoadCards","Component","cardNamesSize","fetchCardNames","fetchScryfallIds","fetchSetCodes","fetchSetIndexCardIndexMultiverseIds","fetchSetNames","scryfallIdsSize","setCodesSize","setIndexCardIndexMultiverseIdsSize","setNamesSize","cardNamesState","initCardNamesState","setCodesState","initSetCodesState","setNamesState","initSetNamesState","scryfallIdsState","initScryfallIdsState","setIndexCardIndexMultiverseIdsState","initSetIndexCardIndexMultiverseIdsState","useEffect","cardNames","multiverseIds","scryfallIds","setCodes","setNames","isCardNamesLoaded","isScryfallIdsLoaded","isSetCodesLoaded","isSetIndexCardIndexMultiverseIdsLoaded","isSetNamesLoaded","bytesLoaded","newBytesLoaded","bytesTotal","newCards","Object","setIndexStr","cardsRecord","setIndex","parseInt","setName","cardIndexStr","cardIndex","push","sort","errors","newErrors","handleRetryClick","inits","Promise","all","useLoadCards","buttonText","dismissible","onButtonClick","visible","LoadMetadataError","onRetryClick","disableContentPaddings","padding","LoadMetadataLoading","LoadMetadata","fetchMetadata","metadataState","initMetadataState","useLoadMetadata","Wrapper","content","contentType","navigationHide","toolsHide","Locale","TRANSLATIONS","English","en","App","locale","useApp","root","fallbackLocale","translations","date","isRecord","isDefault","prototype","hasOwnProperty","call","mapToDefault","t","default","isString","validateArrayOfStrings","Array","isArray","every","isArrayOfStrings","Error","validateDefault","validateMetaData","cardKingdomIdsSize","tcgplayerProductIdsSize","isMetaData","isRecordOf","isOfType","values","validateRecordOfStrings","isRecordOfStrings","isNumber","Number","isNaN","isRecordOfNumbers","validateRecordOfRecordOfNumbers","isRecordOfRecordOfNumbers","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.62a475e3.chunk.js","sourcesContent":["import type { NonCancelableCustomEvent } from '@awsui/components-react';\nimport type { PaginationProps } from '@awsui/components-react/pagination';\nimport AwsuiPagination from '@awsui/components-react/pagination';\nimport type { ReactElement } from 'react';\nimport usePagination from './pagination.hook';\n\ninterface Props {\n  readonly currentPageIndex: number;\n  readonly pagesCount: number;\n  readonly onChange: (\n    event: Readonly<\n      NonCancelableCustomEvent<Readonly<PaginationProps.ChangeDetail>>\n    >,\n  ) => void;\n}\n\nexport default function Pagination({\n  currentPageIndex,\n  onChange,\n  pagesCount,\n}: Props): ReactElement {\n  const { ariaLabels } = usePagination();\n\n  return (\n    <AwsuiPagination\n      ariaLabels={ariaLabels}\n      currentPageIndex={currentPageIndex}\n      onChange={onChange}\n      pagesCount={pagesCount}\n    />\n  );\n}\n","import type { PaginationProps } from '@awsui/components-react/pagination';\nimport type { TranslateFunction } from 'lazy-i18n';\nimport { useTranslate } from 'lazy-i18n';\nimport { useMemo } from 'react';\n\ninterface State {\n  readonly ariaLabels: PaginationProps.Labels;\n}\n\nexport default function usePagination(): State {\n  const translate: TranslateFunction = useTranslate();\n\n  return {\n    ariaLabels: useMemo(\n      (): PaginationProps.Labels => ({\n        nextPageLabel: translate('Next page'),\n        previousPageLabel: translate('Previous page'),\n        pageLabel(pageNumber: number): string {\n          return translate('Page $n', { n: pageNumber }) ?? '';\n        },\n      }),\n      [translate],\n    ),\n  };\n}\n","export default function trueFunction(): true {\n  return true;\n}\n","import type { Dispatch, SetStateAction } from 'react';\nimport { useCallback } from 'react';\n\nconst NONE = 0;\nconst SINGLE = 1;\n\nexport default function useAddToCollection(\n  setCollection: Dispatch<SetStateAction<Map<number, number>>>,\n): (multiverseId: number) => void {\n  return useCallback(\n    (multiverseId: number): void => {\n      setCollection(\n        (oldCollection: Readonly<Map<number, number>>): Map<number, number> => {\n          const newCollection: Map<number, number> = new Map(oldCollection);\n          const oldCount: number = oldCollection.get(multiverseId) ?? NONE;\n          newCollection.set(multiverseId, oldCount + SINGLE);\n          return newCollection;\n        },\n      );\n    },\n    [setCollection],\n  );\n}\n","const BORDER_CROP_HEIGHT = 680;\nconst LARGE_HEIGHT = 936;\nconst NORMAL_HEIGHT = 680;\nconst PNG_HEIGHT = 1040;\nconst SMALL_HEIGHT = 204;\n\nexport default function mapImageToHeight(\n  image: 'art_crop' | 'border_crop' | 'large' | 'normal' | 'png' | 'small',\n): number | undefined {\n  switch (image) {\n    case 'art_crop':\n      return;\n    case 'border_crop':\n      return BORDER_CROP_HEIGHT;\n    case 'large':\n      return LARGE_HEIGHT;\n    case 'normal':\n      return NORMAL_HEIGHT;\n    case 'png':\n      return PNG_HEIGHT;\n    case 'small':\n      return SMALL_HEIGHT;\n  }\n}\n","const BORDER_CROP_WIDTH = 480;\nconst LARGE_WIDTH = 672;\nconst NORMAL_WIDTH = 488;\nconst PNG_WIDTH = 745;\nconst SMALL_WIDTH = 146;\n\nexport default function mapImageToWidth(\n  image: 'art_crop' | 'border_crop' | 'large' | 'normal' | 'png' | 'small',\n): number | undefined {\n  switch (image) {\n    case 'art_crop':\n      return;\n    case 'border_crop':\n      return BORDER_CROP_WIDTH;\n    case 'large':\n      return LARGE_WIDTH;\n    case 'normal':\n      return NORMAL_WIDTH;\n    case 'png':\n      return PNG_WIDTH;\n    case 'small':\n      return SMALL_WIDTH;\n  }\n}\n","import type { ReactElement } from 'react';\nimport useScryfallImage from './scryfall-image.hook';\n\ninterface Props {\n  readonly alt?: string;\n  readonly children: string;\n  readonly className?: string;\n  readonly title?: string;\n  readonly image:\n    | 'art_crop'\n    | 'border_crop'\n    | 'large'\n    | 'normal'\n    | 'png'\n    | 'small';\n}\n\nexport default function ScryfallImage({\n  alt,\n  children: scryfallId,\n  className,\n  image,\n  title,\n}: Props): ReactElement {\n  const { height, src, width } = useScryfallImage({ image, scryfallId });\n\n  return (\n    <img\n      alt={alt}\n      className={className}\n      height={height}\n      src={src}\n      title={title}\n      width={width}\n    />\n  );\n}\n","import mapImageToHeight from './scryfall-image.util.map-image-to-height';\nimport mapImageToWidth from './scryfall-image.util.map-image-to-width';\n\ninterface Props {\n  readonly scryfallId: string;\n  readonly image:\n    | 'art_crop'\n    | 'border_crop'\n    | 'large'\n    | 'normal'\n    | 'png'\n    | 'small';\n}\n\ninterface State {\n  height?: number;\n  src: string;\n  width?: number;\n}\n\nconst FIRST_CHARACTER = 0;\nconst SECOND_CHARACTER = 1;\nconst SINGLE_CHARACTER = 1;\n\nexport default function useScryfallImage({ image, scryfallId }: Props): State {\n  const srcDir1: string = scryfallId.substr(FIRST_CHARACTER, SINGLE_CHARACTER);\n  const srcDir2: string = scryfallId.substr(SECOND_CHARACTER, SINGLE_CHARACTER);\n\n  return {\n    height: mapImageToHeight(image),\n    src: `https://c1.scryfall.com/file/scryfall-cards/${image}/front/${srcDir1}/${srcDir2}/${scryfallId}.jpg`,\n    width: mapImageToWidth(image),\n  };\n}\n","import Button from '@awsui/components-react/button';\nimport type { CardsProps } from '@awsui/components-react/cards';\nimport Input from '@awsui/components-react/input';\nimport SpaceBetween from '@awsui/components-react/space-between';\nimport type { ReactElement } from 'react';\nimport { useMemo } from 'react';\nimport ScryfallImage from '../../components/scryfall-image';\nimport type MagicCard from '../../types/magic-card';\nimport styles from './card-collection.hook.card-definition.module.scss';\n\ninterface Props {\n  readonly collection: Readonly<Map<number, number>>;\n  readonly onAddToCollection: (multiverseId: number) => void;\n  readonly onSubtractFromCollection: (multiverseId: number) => void;\n}\n\nconst NONE = 0;\n\nexport default function useCardCollectionCardDefinition({\n  collection,\n  onAddToCollection,\n  onSubtractFromCollection,\n}: Props): CardsProps.CardDefinition<MagicCard> {\n  return useMemo(\n    (): CardsProps.CardDefinition<MagicCard> => ({\n      header({\n        cardName,\n        multiverseId,\n        scryfallId,\n        setCode,\n      }: MagicCard): ReactElement {\n        const count: number = collection.get(multiverseId) ?? NONE;\n\n        return (\n          <SpaceBetween direction=\"horizontal\" size=\"xxxs\">\n            <ScryfallImage\n              alt={cardName}\n              className={styles.image}\n              image=\"small\"\n              title={`${cardName} (${setCode})`}\n            >\n              {scryfallId}\n            </ScryfallImage>\n            <SpaceBetween\n              className={styles.collection}\n              direction=\"vertical\"\n              size=\"xxxs\"\n            >\n              <Button\n                className={styles.button}\n                onClick={(): void => {\n                  onAddToCollection(multiverseId);\n                }}\n              >\n                +\n              </Button>\n              <Input\n                className={styles.count}\n                disableBrowserAutocorrect\n                readOnly\n                value={count.toString()}\n              />\n              <Button\n                className={styles.button}\n                disabled={count === NONE}\n                onClick={(): void => {\n                  onSubtractFromCollection(multiverseId);\n                }}\n              >\n                -\n              </Button>\n            </SpaceBetween>\n          </SpaceBetween>\n        );\n      },\n    }),\n    [collection, onAddToCollection, onSubtractFromCollection],\n  );\n}\n","import type { Dispatch, SetStateAction } from 'react';\nimport { useCallback } from 'react';\n\nconst NONE = 0;\nconst SINGLE = 1;\n\nexport default function useSubtractFromCollection(\n  setCollection: Dispatch<SetStateAction<Map<number, number>>>,\n): (multiverseId: number) => void {\n  return useCallback(\n    (multiverseId: number): void => {\n      setCollection(\n        (oldCollection: Readonly<Map<number, number>>): Map<number, number> => {\n          const oldCount: number = oldCollection.get(multiverseId) ?? NONE;\n          if (oldCount === NONE) {\n            return oldCollection;\n          }\n\n          const newCollection: Map<number, number> = new Map(oldCollection);\n          if (oldCount === SINGLE) {\n            newCollection.delete(multiverseId);\n          } else {\n            newCollection.set(multiverseId, oldCount - SINGLE);\n          }\n          return newCollection;\n        },\n      );\n    },\n    [setCollection],\n  );\n}\n","import type { NonCancelableCustomEvent } from '@awsui/components-react';\nimport type { CardsProps } from '@awsui/components-react/cards';\nimport type { PaginationProps } from '@awsui/components-react/pagination';\nimport type { TextFilterProps } from '@awsui/components-react/text-filter';\nimport download from 'downloadjs';\nimport type { TranslateFunction } from 'lazy-i18n';\nimport { useTranslate } from 'lazy-i18n';\nimport { useCallback, useMemo, useState } from 'react';\nimport { usePagination, useTextFilter } from 'use-awsui';\nimport type MagicCard from '../../types/magic-card';\nimport mapMapToRecord from '../../utils/map-map-to-record';\nimport useAddToCollection from './card-collection.hook.add-to-collection';\nimport useCardDefinition from './card-collection.hook.card-definition';\nimport useSubtractFromCollection from './card-collection.hook.subtract-from-collection';\n\ninterface State {\n  readonly cardDefinition: CardsProps.CardDefinition<MagicCard>;\n  readonly currentPageIndex: number;\n  readonly filteringPlaceholder?: string;\n  readonly filteringText: string;\n  readonly handleClearFilter: () => void;\n  readonly handleExport: () => void;\n  readonly isExportDisabled: boolean;\n  readonly items: readonly MagicCard[];\n  readonly pagesCount: number;\n  readonly selectedItems: readonly MagicCard[];\n  readonly handleTextFilterChange: (\n    event: Readonly<\n      NonCancelableCustomEvent<Readonly<TextFilterProps.ChangeDetail>>\n    >,\n  ) => void;\n  readonly handlePaginationChange: (\n    event: Readonly<\n      NonCancelableCustomEvent<Readonly<PaginationProps.ChangeDetail>>\n    >,\n  ) => void;\n}\n\nconst DEFAULT_COLLECTION: Map<number, number> = new Map<number, number>();\nconst NONE = 0;\nconst PAGE_SIZE = 8;\n\nexport default function useCardCollection(cards: readonly MagicCard[]): State {\n  // Contexts\n  const translate: TranslateFunction = useTranslate();\n\n  // States\n  const {\n    currentPageIndex,\n    handleChange: handlePaginationChange,\n    paginate,\n  } = usePagination({\n    pageSize: PAGE_SIZE,\n  });\n\n  const [collection, setCollection] =\n    useState<Map<number, number>>(DEFAULT_COLLECTION);\n\n  const {\n    filteringText,\n    handleChange: handleTextFilterChange,\n    setFilteringText,\n  } = useTextFilter();\n\n  const lowerCaseFilteringText: string = filteringText.toLowerCase();\n  const filteredItems: readonly MagicCard[] =\n    useMemo((): readonly MagicCard[] => {\n      if (lowerCaseFilteringText === '') {\n        return cards;\n      }\n\n      const filterByName = ({ cardName }: MagicCard): boolean =>\n        cardName.toLowerCase().includes(lowerCaseFilteringText);\n      return cards.filter(filterByName);\n    }, [cards, lowerCaseFilteringText]);\n\n  return {\n    currentPageIndex,\n    filteringPlaceholder: translate('Filter by name'),\n    filteringText,\n    handlePaginationChange,\n    handleTextFilterChange,\n    isExportDisabled: collection.size === NONE,\n    pagesCount: Math.ceil(filteredItems.length / PAGE_SIZE),\n\n    cardDefinition: useCardDefinition({\n      collection,\n      onAddToCollection: useAddToCollection(setCollection),\n      onSubtractFromCollection: useSubtractFromCollection(setCollection),\n    }),\n\n    handleClearFilter: useCallback((): void => {\n      setFilteringText('');\n    }, [setFilteringText]),\n\n    handleExport: useCallback((): void => {\n      const newExport: Record<number, number> = mapMapToRecord(collection);\n      download(\n        JSON.stringify(newExport),\n        'mtgenius-collection.json',\n        'application/json',\n      );\n    }, [collection]),\n\n    items: useMemo(\n      (): readonly MagicCard[] => paginate(filteredItems),\n      [filteredItems, paginate],\n    ),\n\n    selectedItems: useMemo((): readonly MagicCard[] => {\n      const filterBySelected = ({ multiverseId }: MagicCard): boolean =>\n        collection.has(multiverseId);\n      return cards.filter(filterBySelected);\n    }, [cards, collection]),\n  };\n}\n","export default function mapMapToRecord<T>(\n  map: Readonly<Map<number | string, T>>,\n): Record<number | string, T> {\n  const record: Record<number | string, T> = {};\n  for (const [key, value] of map.entries()) {\n    record[key] = value;\n  }\n  return record;\n}\n","import Box from '@awsui/components-react/box';\nimport Button from '@awsui/components-react/button';\nimport SpaceBetween from '@awsui/components-react/space-between';\nimport I18n from 'lazy-i18n';\nimport type { ReactElement } from 'react';\n\ninterface Props {\n  readonly onClearFilter: () => void;\n}\n\nexport default function CardCollectionEmpty({\n  onClearFilter,\n}: Props): ReactElement {\n  return (\n    <SpaceBetween direction=\"vertical\" size=\"m\">\n      <Box variant=\"p\">\n        <I18n>No cards matched your filter.</I18n>\n      </Box>\n      <Button onClick={onClearFilter}>\n        <I18n>Clear filter</I18n>\n      </Button>\n    </SpaceBetween>\n  );\n}\n","import type { BoxProps } from '@awsui/components-react/box';\nimport Box from '@awsui/components-react/box';\nimport Button from '@awsui/components-react/button';\nimport ColumnLayout from '@awsui/components-react/column-layout';\nimport Header from '@awsui/components-react/header';\nimport SpaceBetween from '@awsui/components-react/space-between';\nimport I18n from 'lazy-i18n';\nimport type { ReactElement } from 'react';\n\ninterface Props {\n  readonly isExportDisabled: boolean;\n  readonly lastUpdated: string;\n  readonly onExport: () => void;\n}\n\nconst TEXT_LABEL_MARGIN: BoxProps.Spacing = {\n  bottom: 'xxxs',\n};\n\nexport default function CardCollectionHeader({\n  isExportDisabled,\n  lastUpdated,\n  onExport,\n}: Props): ReactElement {\n  return (\n    <Header\n      actions={\n        <SpaceBetween direction=\"horizontal\" size=\"s\">\n          <Button>\n            <I18n>Import</I18n>\n          </Button>\n          <Button\n            disabled={isExportDisabled}\n            onClick={onExport}\n            variant=\"primary\"\n          >\n            <I18n>Export</I18n>\n          </Button>\n        </SpaceBetween>\n      }\n      description={\n        <ColumnLayout variant=\"text-grid\">\n          <div>\n            <Box color=\"text-label\" display=\"inline\" margin={TEXT_LABEL_MARGIN}>\n              <I18n>Last updated</I18n>:\n            </Box>{' '}\n            {lastUpdated}\n          </div>\n        </ColumnLayout>\n      }\n    >\n      MTGeni.us Collection\n    </Header>\n  );\n}\n","import Cards from '@awsui/components-react/cards';\nimport TextFilter from '@awsui/components-react/text-filter';\nimport type { ReactElement } from 'react';\nimport Pagination from '../../components/pagination';\nimport type MagicCard from '../../types/magic-card';\nimport trueFunction from '../../utils/true-function';\nimport useCardCollection from './card-collection.hook';\nimport Empty from './card-collection.view.empty';\nimport Header from './card-collection.view.header';\n\ninterface Props {\n  readonly children: readonly Readonly<MagicCard>[];\n  readonly lastUpdated: string;\n}\n\nexport default function CardCollection({\n  children: cards,\n  lastUpdated,\n}: Props): ReactElement {\n  const {\n    cardDefinition,\n    currentPageIndex,\n    filteringPlaceholder,\n    filteringText,\n    handleClearFilter,\n    handleExport,\n    handlePaginationChange,\n    handleTextFilterChange,\n    isExportDisabled,\n    items,\n    pagesCount,\n    selectedItems,\n  } = useCardCollection(cards);\n\n  return (\n    <Cards\n      cardDefinition={cardDefinition}\n      empty={<Empty onClearFilter={handleClearFilter} />}\n      isItemDisabled={trueFunction}\n      items={items}\n      selectedItems={selectedItems}\n      selectionType=\"multi\"\n      stickyHeader\n      trackBy=\"multiverseId\"\n      filter={\n        <TextFilter\n          filteringPlaceholder={filteringPlaceholder}\n          filteringText={filteringText}\n          onChange={handleTextFilterChange}\n        />\n      }\n      header={\n        <Header\n          isExportDisabled={isExportDisabled}\n          lastUpdated={lastUpdated}\n          onExport={handleExport}\n        />\n      }\n      pagination={\n        <Pagination\n          currentPageIndex={currentPageIndex}\n          onChange={handlePaginationChange}\n          pagesCount={pagesCount}\n        />\n      }\n    />\n  );\n}\n","import type { Reducer } from 'react';\nimport { useCallback, useReducer } from 'react';\nimport type AsyncState from '../types/async-state';\n\ninterface ErrorAction {\n  error: Error;\n  type: 'ERROR';\n}\n\ninterface InitAction {\n  type: 'INIT';\n}\n\ninterface SuccessAction<T> {\n  data: T;\n  type: 'SUCCESS';\n}\n\nconst defaultInitializer = <T>(): AsyncState<T> => ({\n  loading: true,\n});\n\nconst reducer = <T>(\n  _prevState: AsyncState<T>,\n  action: ErrorAction | InitAction | SuccessAction<T>,\n): AsyncState<T> => {\n  switch (action.type) {\n    case 'ERROR':\n      return {\n        error: action.error,\n        loading: false,\n      };\n    case 'INIT':\n      return {\n        loading: true,\n      };\n    case 'SUCCESS':\n      return {\n        data: action.data,\n        loading: false,\n      };\n  }\n};\n\nexport default function useAsyncState<T>(\n  act: () => Promise<T>,\n): [AsyncState<T>, () => Promise<void>] {\n  const [state, dispatch] = useReducer<\n    Reducer<AsyncState<T>, ErrorAction | InitAction | SuccessAction<T>>,\n    null\n  >(reducer, null, defaultInitializer);\n\n  return [\n    state,\n    useCallback(async (): Promise<void> => {\n      const handleError = (err: Readonly<Error>): void => {\n        dispatch({\n          error: err,\n          type: 'ERROR',\n        });\n      };\n\n      const handleSuccess = (data: T): void => {\n        dispatch({\n          data,\n          type: 'SUCCESS',\n        });\n      };\n\n      dispatch({ type: 'INIT' });\n\n      return act().then(handleSuccess).catch(handleError);\n    }, [act]),\n  ];\n}\n","export default function NOOP(): void {\n  // noop\n}\n","import type MagicCard from '../../types/magic-card';\n\nconst SORT_PREVIOUS = -1;\nconst SORT_NEXT = 1;\n\nexport default function sortCards(one: MagicCard, two: MagicCard): number {\n  if (one.cardName < two.cardName) {\n    return SORT_PREVIOUS;\n  }\n  if (one.cardName > two.cardName) {\n    return SORT_NEXT;\n  }\n  if (one.multiverseId < two.multiverseId) {\n    return SORT_PREVIOUS;\n  }\n  return SORT_NEXT;\n}\n","import type { ReactElement } from 'react';\n\nexport default function mapErrorToListItem(err: Readonly<Error>): ReactElement {\n  return <li key={err.message}>{err.message}</li>;\n}\n","import Alert from '@awsui/components-react/alert';\nimport Box from '@awsui/components-react/box';\nimport I18n from 'lazy-i18n';\nimport type { ComponentType, ReactElement } from 'react';\nimport type MagicCard from '../../types/magic-card';\nimport useLoadCards from './load-cards.hook';\nimport mapErrorToListItem from './load-cards.util.map-error-to-list-item';\n\ninterface ComponentProps {\n  readonly children: readonly MagicCard[];\n  readonly lastUpdated: string;\n}\n\ninterface Props {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  readonly Component: ComponentType<ComponentProps>;\n  readonly cardNamesSize: number;\n  readonly fetchCardNames: () => Promise<string[]>;\n  readonly fetchScryfallIds: () => Promise<Record<string, string>>;\n  readonly fetchSetCodes: () => Promise<string[]>;\n  readonly fetchSetNames: () => Promise<string[]>;\n  readonly lastUpdated: string;\n  readonly scryfallIdsSize: number;\n  readonly setCodesSize: number;\n  readonly setIndexCardIndexMultiverseIdsSize: number;\n  readonly setNamesSize: number;\n  readonly fetchSetIndexCardIndexMultiverseIds: () => Promise<\n    Record<number | string, Record<number | string, number>>\n  >;\n}\n\nconst FIRST = 0;\nconst NONE = 0;\nconst SINGLE = 1;\n\nexport default function LoadCards({\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  Component,\n  cardNamesSize,\n  fetchCardNames,\n  fetchScryfallIds,\n  fetchSetCodes,\n  fetchSetIndexCardIndexMultiverseIds,\n  fetchSetNames,\n  lastUpdated,\n  scryfallIdsSize,\n  setCodesSize,\n  setIndexCardIndexMultiverseIdsSize,\n  setNamesSize,\n}: Props): ReactElement {\n  const { bytesLoaded, bytesTotal, cards, errors, handleRetryClick } =\n    useLoadCards({\n      cardNamesSize,\n      fetchCardNames,\n      fetchScryfallIds,\n      fetchSetCodes,\n      fetchSetIndexCardIndexMultiverseIds,\n      fetchSetNames,\n      scryfallIdsSize,\n      setCodesSize,\n      setIndexCardIndexMultiverseIdsSize,\n      setNamesSize,\n    });\n\n  if (errors.length > NONE) {\n    return (\n      <Alert\n        buttonText={<I18n>Retry</I18n>}\n        dismissible={false}\n        onButtonClick={handleRetryClick}\n        type=\"error\"\n        visible\n        header={\n          errors.length !== SINGLE ? (\n            <I18n>There were errors loading the card data.</I18n>\n          ) : (\n            <I18n>There was an error loading the card data.</I18n>\n          )\n        }\n      >\n        {errors.length !== SINGLE ? (\n          <ul>{errors.map(mapErrorToListItem)}</ul>\n        ) : (\n          <>{errors[FIRST].message}</>\n        )}\n      </Alert>\n    );\n  }\n\n  if (bytesLoaded < bytesTotal) {\n    return (\n      <Box>\n        Loaded {bytesLoaded} of {bytesTotal} bytes\n      </Box>\n    );\n  }\n\n  return <Component lastUpdated={lastUpdated}>{cards}</Component>;\n}\n","import { useCallback, useEffect, useMemo } from 'react';\nimport useAsyncState from '../../hooks/use-async-state';\nimport type MagicCard from '../../types/magic-card';\nimport NOOP from '../../utils/noop';\nimport sortCards from './load-cards.util.sort-cards';\n\ninterface Props {\n  readonly cardNamesSize: number;\n  readonly fetchCardNames: () => Promise<string[]>;\n  readonly fetchScryfallIds: () => Promise<Record<string, string>>;\n  readonly fetchSetCodes: () => Promise<string[]>;\n  readonly fetchSetNames: () => Promise<string[]>;\n  readonly scryfallIdsSize: number;\n  readonly setCodesSize: number;\n  readonly setIndexCardIndexMultiverseIdsSize: number;\n  readonly setNamesSize: number;\n  readonly fetchSetIndexCardIndexMultiverseIds: () => Promise<\n    Record<number | string, Record<number | string, number>>\n  >;\n}\n\ninterface State {\n  readonly bytesLoaded: number;\n  readonly bytesTotal: number;\n  readonly cards: MagicCard[];\n  readonly errors: Error[];\n  readonly handleRetryClick: () => void;\n}\n\nexport default function useLoadCards({\n  cardNamesSize,\n  fetchCardNames,\n  fetchScryfallIds,\n  fetchSetCodes,\n  fetchSetIndexCardIndexMultiverseIds,\n  fetchSetNames,\n  scryfallIdsSize,\n  setCodesSize,\n  setIndexCardIndexMultiverseIdsSize,\n  setNamesSize,\n}: Props): State {\n  const [cardNamesState, initCardNamesState] = useAsyncState(fetchCardNames);\n  const [setCodesState, initSetCodesState] = useAsyncState(fetchSetCodes);\n  const [setNamesState, initSetNamesState] = useAsyncState(fetchSetNames);\n  const [scryfallIdsState, initScryfallIdsState] =\n    useAsyncState(fetchScryfallIds);\n  const [\n    setIndexCardIndexMultiverseIdsState,\n    initSetIndexCardIndexMultiverseIdsState,\n  ] = useAsyncState(fetchSetIndexCardIndexMultiverseIds);\n\n  useEffect((): void => {\n    initCardNamesState().catch(NOOP);\n    initScryfallIdsState().catch(NOOP);\n    initSetCodesState().catch(NOOP);\n    initSetNamesState().catch(NOOP);\n    initSetIndexCardIndexMultiverseIdsState().catch(NOOP);\n  }, [\n    initCardNamesState,\n    initScryfallIdsState,\n    initSetCodesState,\n    initSetNamesState,\n    initSetIndexCardIndexMultiverseIdsState,\n  ]);\n\n  const cardNames: string[] | undefined = cardNamesState.data;\n  const multiverseIds:\n    | Record<number | string, Record<number | string, number>>\n    | undefined = setIndexCardIndexMultiverseIdsState.data;\n  const scryfallIds: Record<string, string> | undefined = scryfallIdsState.data;\n  const setCodes: string[] | undefined = setCodesState.data;\n  const setNames: string[] | undefined = setNamesState.data;\n  const isCardNamesLoaded: boolean = typeof cardNames !== 'undefined';\n  const isScryfallIdsLoaded: boolean = typeof scryfallIds !== 'undefined';\n  const isSetCodesLoaded: boolean = typeof setCodes !== 'undefined';\n  const isSetIndexCardIndexMultiverseIdsLoaded: boolean =\n    typeof multiverseIds !== 'undefined';\n  const isSetNamesLoaded: boolean = typeof setNames !== 'undefined';\n  return {\n    bytesLoaded: useMemo((): number => {\n      let newBytesLoaded = 0;\n      if (isCardNamesLoaded) {\n        newBytesLoaded += cardNamesSize;\n      }\n      if (isScryfallIdsLoaded) {\n        newBytesLoaded += scryfallIdsSize;\n      }\n      if (isSetCodesLoaded) {\n        newBytesLoaded += setCodesSize;\n      }\n      if (isSetIndexCardIndexMultiverseIdsLoaded) {\n        newBytesLoaded += setIndexCardIndexMultiverseIdsSize;\n      }\n      if (isSetNamesLoaded) {\n        newBytesLoaded += setNamesSize;\n      }\n      return newBytesLoaded;\n    }, [\n      cardNamesSize,\n      isCardNamesLoaded,\n      isScryfallIdsLoaded,\n      isSetCodesLoaded,\n      isSetIndexCardIndexMultiverseIdsLoaded,\n      isSetNamesLoaded,\n      scryfallIdsSize,\n      setCodesSize,\n      setNamesSize,\n      setIndexCardIndexMultiverseIdsSize,\n    ]),\n\n    bytesTotal:\n      cardNamesSize +\n      scryfallIdsSize +\n      setCodesSize +\n      setIndexCardIndexMultiverseIdsSize +\n      setNamesSize,\n\n    cards: useMemo((): MagicCard[] => {\n      const newCards: MagicCard[] = [];\n      if (\n        typeof cardNames === 'undefined' ||\n        typeof multiverseIds === 'undefined' ||\n        typeof scryfallIds === 'undefined' ||\n        typeof setCodes === 'undefined' ||\n        typeof setNames === 'undefined'\n      ) {\n        return newCards;\n      }\n\n      for (const [setIndexStr, cardsRecord] of Object.entries(multiverseIds)) {\n        const setIndex: number = parseInt(setIndexStr, 10);\n        const setCode: string = setCodes[setIndex];\n        const setName: string = setNames[setIndex];\n        for (const [cardIndexStr, multiverseId] of Object.entries(\n          cardsRecord,\n        )) {\n          const cardIndex: number = parseInt(cardIndexStr, 10);\n          newCards.push({\n            cardName: cardNames[cardIndex],\n            multiverseId,\n            scryfallId: scryfallIds[multiverseId],\n            setCode,\n            setName,\n          });\n        }\n      }\n\n      return newCards.sort(sortCards);\n    }, [cardNames, multiverseIds, scryfallIds, setCodes, setNames]),\n\n    errors: useMemo((): Error[] => {\n      const newErrors: Error[] = [];\n      if (cardNamesState.error) {\n        newErrors.push(cardNamesState.error);\n      }\n      if (scryfallIdsState.error) {\n        newErrors.push(scryfallIdsState.error);\n      }\n      if (setCodesState.error) {\n        newErrors.push(setCodesState.error);\n      }\n      if (setIndexCardIndexMultiverseIdsState.error) {\n        newErrors.push(setIndexCardIndexMultiverseIdsState.error);\n      }\n      if (setNamesState.error) {\n        newErrors.push(setNamesState.error);\n      }\n      return newErrors;\n    }, [\n      cardNamesState.error,\n      scryfallIdsState.error,\n      setCodesState.error,\n      setIndexCardIndexMultiverseIdsState.error,\n      setNamesState.error,\n    ]),\n\n    handleRetryClick: useCallback(async (): Promise<unknown[]> => {\n      const inits: Promise<unknown>[] = [];\n      if (cardNamesState.error) {\n        inits.push(initCardNamesState());\n      }\n      if (scryfallIdsState.error) {\n        inits.push(initScryfallIdsState());\n      }\n      if (setCodesState.error) {\n        inits.push(initSetCodesState());\n      }\n      if (setIndexCardIndexMultiverseIdsState.error) {\n        inits.push(initSetIndexCardIndexMultiverseIdsState());\n      }\n      if (setNamesState.error) {\n        inits.push(initSetNamesState());\n      }\n      return Promise.all(inits);\n    }, [\n      cardNamesState.error,\n      initCardNamesState,\n      initScryfallIdsState,\n      initSetCodesState,\n      initSetIndexCardIndexMultiverseIdsState,\n      initSetNamesState,\n      scryfallIdsState.error,\n      setCodesState.error,\n      setIndexCardIndexMultiverseIdsState.error,\n      setNamesState.error,\n    ]),\n  };\n}\n","import Alert from '@awsui/components-react/alert';\nimport Box from '@awsui/components-react/box';\nimport Container from '@awsui/components-react/container';\nimport Header from '@awsui/components-react/header';\nimport I18n from 'lazy-i18n';\nimport type { ReactElement } from 'react';\n\ninterface Props {\n  readonly children: Readonly<Error>;\n  readonly onRetryClick: () => void;\n}\n\nexport default function LoadMetadataError({\n  children,\n  onRetryClick,\n}: Props): ReactElement {\n  return (\n    <Container\n      disableContentPaddings\n      header={<Header variant=\"h1\">MTGeni.us Collection</Header>}\n    >\n      <Box padding=\"m\">\n        <Alert\n          buttonText={<I18n>Retry</I18n>}\n          dismissible={false}\n          onButtonClick={onRetryClick}\n          type=\"error\"\n          visible\n          header={\n            <I18n>There was an error loading the application metadata.</I18n>\n          }\n        >\n          {children.message}\n        </Alert>\n      </Box>\n    </Container>\n  );\n}\n","import Box from '@awsui/components-react/box';\nimport Container from '@awsui/components-react/container';\nimport Header from '@awsui/components-react/header';\nimport SpaceBetween from '@awsui/components-react/space-between';\nimport Spinner from '@awsui/components-react/spinner';\nimport I18n from 'lazy-i18n';\nimport type { ReactElement } from 'react';\n\nexport default function LoadMetadataLoading(): ReactElement {\n  return (\n    <Container\n      disableContentPaddings\n      header={<Header variant=\"h1\">MTGeni.us Collection</Header>}\n    >\n      <Box padding=\"m\">\n        <SpaceBetween direction=\"horizontal\" size=\"xxs\">\n          <Spinner />\n          <span>\n            <I18n>Loading metadata</I18n>\n          </span>\n        </SpaceBetween>\n      </Box>\n    </Container>\n  );\n}\n","import type { ReactElement, ReactNode } from 'react';\nimport type MetadataType from '../../types/metadata';\nimport useLoadMetadata from './load-metadata.hook';\nimport Error from './load-metadata.view.error';\nimport Loading from './load-metadata.view.loading';\n\ninterface Props {\n  readonly children: (metadata: MetadataType) => ReactNode;\n  readonly fetchMetadata: () => Promise<MetadataType>;\n}\n\nexport default function LoadMetadata({\n  children,\n  fetchMetadata,\n}: Props): ReactElement {\n  const { handleRetryClick, metadataState } = useLoadMetadata({\n    fetchMetadata,\n  });\n\n  if (metadataState.loading) {\n    return <Loading />;\n  }\n\n  if (metadataState.error) {\n    return <Error onRetryClick={handleRetryClick}>{metadataState.error}</Error>;\n  }\n\n  return <>{children(metadataState.data)}</>;\n}\n","import { useEffect } from 'react';\nimport useAsyncState from '../../hooks/use-async-state';\nimport type AsyncState from '../../types/async-state';\nimport type Metadata from '../../types/metadata';\nimport NOOP from '../../utils/noop';\n\ninterface Props {\n  readonly fetchMetadata: () => Promise<Metadata>;\n}\n\ninterface State {\n  readonly handleRetryClick: () => void;\n  readonly metadataState: AsyncState<Metadata>;\n}\n\nexport default function useLoadMetadata({ fetchMetadata }: Props): State {\n  // States\n  const [metadataState, initMetadataState] =\n    useAsyncState<Metadata>(fetchMetadata);\n\n  useEffect((): void => {\n    initMetadataState().catch(NOOP);\n  }, [initMetadataState]);\n\n  return {\n    handleRetryClick: initMetadataState,\n    metadataState,\n  };\n}\n","import AppLayout from '@awsui/components-react/app-layout';\nimport type { ReactElement, ReactNode } from 'react';\n\ninterface Props {\n  readonly children?: ReactNode;\n}\n\nexport default function Wrapper({ children }: Props): ReactElement {\n  return (\n    <AppLayout\n      content={children}\n      contentType=\"cards\"\n      navigationHide\n      toolsHide\n    />\n  );\n}\n","enum Locale {\n  English = 'en',\n}\n\nexport default Locale;\n","import type { Translations } from 'lazy-i18n';\nimport Locale from '../constants/locale';\nimport en from '../translations/en.json';\n\nconst TRANSLATIONS: Record<Locale, Translations | undefined> = {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  [Locale.English]: en as unknown as Record<string, string>,\n};\n\nexport default TRANSLATIONS;\n","import '@awsui/global-styles/index.css';\nimport AwsuiDarkMode from 'awsui-dark-mode';\nimport { I18nProvider } from 'lazy-i18n';\nimport type { ReactElement } from 'react';\nimport { StrictMode } from 'react';\nimport CardCollection from '../../components/card-collection';\nimport LoadCards from '../../components/load-cards';\nimport LoadMetadata from '../../components/load-metadata';\nimport Wrapper from '../../components/wrapper';\nimport TRANSLATIONS from '../../constants/translations';\nimport type MetadataType from '../../types/metadata';\nimport useApp from './app.hook';\nimport './app.scss';\n\ninterface Props {\n  readonly fetchCardNames: () => Promise<string[]>;\n  readonly fetchMetadata: () => Promise<MetadataType>;\n  readonly fetchScryfallIds: () => Promise<Record<string, string>>;\n  readonly fetchSetCodes: () => Promise<string[]>;\n  readonly fetchSetNames: () => Promise<string[]>;\n  readonly fetchSetIndexCardIndexMultiverseIds: () => Promise<\n    Record<number | string, Record<number | string, number>>\n  >;\n}\n\nexport default function App({\n  fetchCardNames,\n  fetchMetadata,\n  fetchScryfallIds,\n  fetchSetCodes,\n  fetchSetIndexCardIndexMultiverseIds,\n  fetchSetNames,\n}: Props): ReactElement {\n  const { locale } = useApp();\n\n  return (\n    <StrictMode>\n      <AwsuiDarkMode root=\"body\">\n        <I18nProvider\n          fallbackLocale=\"en\"\n          locale={locale}\n          translations={TRANSLATIONS}\n        >\n          <Wrapper>\n            <LoadMetadata fetchMetadata={fetchMetadata}>\n              {({\n                // cardKingdomIdsSize,\n                cardNamesSize,\n                date,\n                scryfallIdsSize,\n                setCodesSize,\n                setIndexCardIndexMultiverseIdsSize,\n                setNamesSize,\n              }: // tcgplayerProductIdsSize,\n              MetadataType): ReactElement => (\n                <LoadCards\n                  Component={CardCollection}\n                  cardNamesSize={cardNamesSize}\n                  fetchCardNames={fetchCardNames}\n                  fetchScryfallIds={fetchScryfallIds}\n                  fetchSetCodes={fetchSetCodes}\n                  fetchSetNames={fetchSetNames}\n                  lastUpdated={date}\n                  scryfallIdsSize={scryfallIdsSize}\n                  setCodesSize={setCodesSize}\n                  setNamesSize={setNamesSize}\n                  fetchSetIndexCardIndexMultiverseIds={\n                    fetchSetIndexCardIndexMultiverseIds\n                  }\n                  setIndexCardIndexMultiverseIdsSize={\n                    setIndexCardIndexMultiverseIdsSize\n                  }\n                />\n              )}\n            </LoadMetadata>\n          </Wrapper>\n        </I18nProvider>\n      </AwsuiDarkMode>\n    </StrictMode>\n  );\n}\n","import { useState } from 'react';\nimport Locale from '../../constants/locale';\n\ninterface State {\n  readonly locale: Locale;\n}\n\nexport default function useApp(): State {\n  const [locale] = useState(Locale.English);\n\n  return {\n    locale,\n  };\n}\n","export default function isRecord(\n  value: unknown,\n): value is Record<number | string, unknown> {\n  return typeof value === 'object' && value !== null;\n}\n","import type Default from '../types/default';\nimport isRecord from '../utils/is-record';\n\nexport default function isDefault<T>(value: unknown): value is Default<T> {\n  return (\n    isRecord(value) && Object.prototype.hasOwnProperty.call(value, 'default')\n  );\n}\n","import type Default from '../types/default';\nimport isDefault from './is-default';\n\nexport default function mapToDefault<T>(t: Default<T> | T): T {\n  if (isDefault(t)) {\n    return t.default;\n  }\n\n  return t;\n}\n","export default function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n","import isArrayOfStrings from '../utils/is-array-of-strings';\n\nexport default function validateArrayOfStrings(value: unknown): string[] {\n  if (!isArrayOfStrings(value)) {\n    throw new Error('Expected an array of strings.');\n  }\n\n  return value;\n}\n","import isString from '../utils/is-string';\n\nexport default function isArrayOfStrings(value: unknown): value is string[] {\n  return Array.isArray(value) && value.every(isString);\n}\n","import type Default from '../types/default';\nimport isDefault from '../utils/is-default';\n\nexport default function validateDefault<T>(value: unknown): Default<T> {\n  if (!isDefault<T>(value)) {\n    throw new Error('Value is not a default export.');\n  }\n\n  return value;\n}\n","import mapToDefault from '../utils/map-to-default';\nimport validateArrayOfStrings from '../utils/validate-array-of-strings';\nimport validateDefault from '../utils/validate-default';\n\nexport default async function fetchCardNames(): Promise<string[]> {\n  return import('../data/card-names.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateArrayOfStrings);\n}\n","import type Metadata from '../types/metadata';\nimport isMetaData from '../utils/is-meta-data';\n\nexport default function validateMetaData(value: unknown): Metadata {\n  if (!isMetaData(value)) {\n    throw new Error('Expected meta data.');\n  }\n\n  return value;\n}\n","import type Metadata from '../types/metadata';\nimport isRecord from '../utils/is-record';\n\nexport default function isMetaData(value: unknown): value is Metadata {\n  return (\n    isRecord(value) &&\n    Object.prototype.hasOwnProperty.call(value, 'cardKingdomIdsSize') &&\n    Object.prototype.hasOwnProperty.call(value, 'cardNamesSize') &&\n    Object.prototype.hasOwnProperty.call(value, 'date') &&\n    Object.prototype.hasOwnProperty.call(value, 'scryfallIdsSize') &&\n    Object.prototype.hasOwnProperty.call(value, 'setCodesSize') &&\n    Object.prototype.hasOwnProperty.call(value, 'setNamesSize') &&\n    Object.prototype.hasOwnProperty.call(value, 'tcgplayerProductIdsSize') &&\n    Object.prototype.hasOwnProperty.call(\n      value,\n      'setIndexCardIndexMultiverseIdsSize',\n    ) &&\n    typeof value.cardKingdomIdsSize === 'number' &&\n    typeof value.cardNamesSize === 'number' &&\n    typeof value.date === 'string' &&\n    typeof value.scryfallIdsSize === 'number' &&\n    typeof value.setCodesSize === 'number' &&\n    typeof value.setIndexCardIndexMultiverseIdsSize === 'number' &&\n    typeof value.setNamesSize === 'number' &&\n    typeof value.tcgplayerProductIdsSize === 'number'\n  );\n}\n","import type Metadata from '../types/metadata';\nimport mapToDefault from '../utils/map-to-default';\nimport validateDefault from '../utils/validate-default';\nimport validateMetaData from '../utils/validate-meta-data';\n\nexport default async function fetchMetadata(): Promise<Metadata> {\n  return import('../data/metadata.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateMetaData);\n}\n","import isRecord from '../utils/is-record';\n\nexport default function isRecordOf<T>(\n  value: unknown,\n  isOfType: (item: unknown) => item is T,\n): value is Record<number | string, T> {\n  return isRecord(value) && Object.values(value).every(isOfType);\n}\n","import isRecordOfStrings from '../utils/is-record-of-strings';\n\nexport default function validateRecordOfStrings(\n  value: unknown,\n): Record<number | string, string> {\n  if (!isRecordOfStrings(value)) {\n    throw new Error('Expected record of strings.');\n  }\n\n  return value;\n}\n","import isRecordOf from '../utils/is-record-of';\nimport isString from '../utils/is-string';\n\nexport default function isRecordOfStrings(\n  value: unknown,\n): value is Record<number | string, string> {\n  return isRecordOf(value, isString);\n}\n","import mapToDefault from '../utils/map-to-default';\nimport validateDefault from '../utils/validate-default';\nimport validateRecordOfStrings from '../utils/validate-record-of-strings';\n\nexport default async function fetchScryfallIds(): Promise<\n  Record<string, string>\n> {\n  return import('../data/scryfall-ids.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateRecordOfStrings);\n}\n","import mapToDefault from '../utils/map-to-default';\nimport validateArrayOfStrings from '../utils/validate-array-of-strings';\nimport validateDefault from '../utils/validate-default';\n\nexport default async function fetchSetCodes(): Promise<string[]> {\n  return import('../data/set-codes.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateArrayOfStrings);\n}\n","export default function isNumber(value: unknown): value is number {\n  return typeof value === 'number' && !Number.isNaN(value);\n}\n","import isNumber from '../utils/is-number';\nimport isRecordOf from '../utils/is-record-of';\n\nexport default function isRecordOfNumbers(\n  value: unknown,\n): value is Record<number | string, number> {\n  return isRecordOf(value, isNumber);\n}\n","import isRecordOfRecordOfNumbers from '../utils/is-record-of-record-of-numbers';\n\nexport default function validateRecordOfRecordOfNumbers(\n  value: unknown,\n): Record<number | string, Record<number | string, number>> {\n  if (!isRecordOfRecordOfNumbers(value)) {\n    throw new Error('Expected record of record of numbers.');\n  }\n\n  return value;\n}\n","import isRecordOf from '../utils/is-record-of';\nimport isRecordOfNumbers from '../utils/is-record-of-numbers';\n\nexport default function isRecordOfRecordOfNumbers(\n  value: unknown,\n): value is Record<number | string, Record<number | string, number>> {\n  return isRecordOf(value, isRecordOfNumbers);\n}\n","import mapToDefault from '../utils/map-to-default';\nimport validateDefault from '../utils/validate-default';\nimport validateRecordOfRecordOfNumbers from '../utils/validate-record-of-record-of-numbers';\n\nexport default async function fetchSetIndexCardIndexMultiverseIds(): Promise<\n  Record<number | string, Record<number | string, number>>\n> {\n  return import('../data/set-index-card-index-multiverse-ids.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateRecordOfRecordOfNumbers);\n}\n","import mapToDefault from '../utils/map-to-default';\nimport validateArrayOfStrings from '../utils/validate-array-of-strings';\nimport validateDefault from '../utils/validate-default';\n\nexport default async function fetchSetNames(): Promise<string[]> {\n  return import('../data/set-names.json')\n    .then(validateDefault)\n    .then(mapToDefault)\n    .then(validateArrayOfStrings);\n}\n","import { render } from 'react-dom';\nimport App from './components/app';\nimport fetchCardNames from './utils/fetch-card-names';\nimport fetchMetadata from './utils/fetch-metadata';\nimport fetchScryfallIds from './utils/fetch-scryfall-ids';\nimport fetchSetCodes from './utils/fetch-set-codes';\nimport fetchSetIndexCardIndexMultiverseIds from './utils/fetch-set-index-card-index-multiverse-ids';\nimport fetchSetNames from './utils/fetch-set-names';\n\nrender(\n  <App\n    fetchCardNames={fetchCardNames}\n    fetchMetadata={fetchMetadata}\n    fetchScryfallIds={fetchScryfallIds}\n    fetchSetCodes={fetchSetCodes}\n    fetchSetIndexCardIndexMultiverseIds={fetchSetIndexCardIndexMultiverseIds}\n    fetchSetNames={fetchSetNames}\n  />,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"card-collection_hook_card-definition_button__w_L-F\",\"count\":\"card-collection_hook_card-definition_count__123bi\",\"collection\":\"card-collection_hook_card-definition_collection__Ra4Zd\",\"image\":\"card-collection_hook_card-definition_image__1p9B7\"};"],"sourceRoot":""}